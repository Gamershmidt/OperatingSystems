The program with n = 3 contains 8 processes(which is 2^3), whether program with n = 5 contains 32 processes (which is 2^5). See the following graphs:
n = 3:
gnome-terminal-─┬─bash─┬─bash─┬─ex3─┬─ex3─┬─ex3───ex3
                │      │      │     │     └─ex3
                │      │      │     ├─ex3───ex3
                │      │      │     └─ex3
                │      │      └─pstree
                │      ├─ex3
                │      ├─ex3
                │      └─ex3
                ├─{gnome-terminal-}
                ├─{gnome-terminal-}
                └─{gnome-terminal-}

                
n = 5:                
gnome-terminal-─┬─bash─┬─bash─┬─ex3─┬─ex3─┬─ex3─┬─ex3─┬─ex3───ex3
                │      │      │     │     │     │     └─ex3
                │      │      │     │     │     ├─ex3───ex3
                │      │      │     │     │     └─ex3
                │      │      │     │     ├─ex3─┬─ex3───ex3
                │      │      │     │     │     └─ex3
                │      │      │     │     ├─ex3───ex3
                │      │      │     │     └─ex3
                │      │      │     ├─ex3─┬─ex3─┬─ex3───ex3
                │      │      │     │     │     └─ex3
                │      │      │     │     ├─ex3───ex3
                │      │      │     │     └─ex3
                │      │      │     ├─ex3─┬─ex3───ex3
                │      │      │     │     └─ex3
                │      │      │     ├─ex3───ex3
                │      │      │     └─ex3
                │      │      └─pstree
                │      ├─ex3
                │      ├─ex3
                │      └─ex3
                ├─{gnome-terminal-}
                ├─{gnome-terminal-}
                └─{gnome-terminal-}
The number of processes growth f(n) = 2^n because fork() doubles the each process. Therefore the tree of processes in this case is a binary tree.
