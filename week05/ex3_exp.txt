The `ex3.c` program was executed with a fixed value of n=10,000,000 and varying thread counts (m) of 1, 2, 4, 10, and 100.

1. Single Thread (m=1):
   - Execution Time: 2,364s
   - The program ran with only one thread, performing all prime calculations sequentially.
   - Expectedly, it had the slowest execution time.

2. Two Threads (m=2):
   - Execution Time: 1,505s
   - The work was divided into two roughly equal intervals, each processed by a separate thread.
   - Execution time decreased significantly compared to a single thread.

3. Four Threads (m=4):
   - Execution Time:  0.859s
   - The interval was divided into four equal parts, each handled by a separate thread.
   - Further improvement in execution time was observed.

4. Ten Threads (m=10):
   - Execution Time: 0.551s
   - The interval was divided into ten equal subintervals, each processed by a separate thread.
   - Execution time continued to decrease, but the gains were less significant compared to previous increases in thread count.

5. One Hundred Threads (m=100):
   - Execution Time: 0.471s
   - The interval was divided into one hundred equal subintervals.
   - Surprisingly, the execution time did not improve much compared to ten threads and was even slower in some cases.
   - This suggests that there may be diminishing returns when increasing the number of threads beyond a certain point due to thread overhead.

Overall, the execution time improved with an increasing number of threads up to a certain point (around 10 threads in this case). 
